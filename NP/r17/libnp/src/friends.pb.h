// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friends.proto

#ifndef PROTOBUF_friends_2eproto__INCLUDED
#define PROTOBUF_friends_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_friends_2eproto();
void protobuf_AssignDesc_friends_2eproto();
void protobuf_ShutdownFile_friends_2eproto();

class FriendsSetSteamIDMessage;
class FriendsGetProfileDataMessage;
class ProfileDataResult;
class FriendsGetProfileDataResultMessage;
class FriendDetails;
class FriendsRosterMessage;
class FriendsPresence;
class FriendsPresenceMessage;
class FriendsSetPresenceMessage;
class FriendsGetUserAvatarMessage;
class FriendsGetUserAvatarResultMessage;

// ===================================================================

class FriendsSetSteamIDMessage : public ::google::protobuf::MessageLite {
 public:
  FriendsSetSteamIDMessage();
  virtual ~FriendsSetSteamIDMessage();

  FriendsSetSteamIDMessage(const FriendsSetSteamIDMessage& from);

  inline FriendsSetSteamIDMessage& operator=(const FriendsSetSteamIDMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const FriendsSetSteamIDMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsSetSteamIDMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsSetSteamIDMessage* other);

  // implements Message ----------------------------------------------

  FriendsSetSteamIDMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsSetSteamIDMessage& from);
  void MergeFrom(const FriendsSetSteamIDMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 steamID = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamIDFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:FriendsSetSteamIDMessage)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();

  ::google::protobuf::uint64 steamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsSetSteamIDMessage* default_instance_;
};
// -------------------------------------------------------------------

class FriendsGetProfileDataMessage : public ::google::protobuf::MessageLite {
 public:
  FriendsGetProfileDataMessage();
  virtual ~FriendsGetProfileDataMessage();

  FriendsGetProfileDataMessage(const FriendsGetProfileDataMessage& from);

  inline FriendsGetProfileDataMessage& operator=(const FriendsGetProfileDataMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const FriendsGetProfileDataMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsGetProfileDataMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsGetProfileDataMessage* other);

  // implements Message ----------------------------------------------

  FriendsGetProfileDataMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsGetProfileDataMessage& from);
  void MergeFrom(const FriendsGetProfileDataMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated fixed64 npids = 1;
  inline int npids_size() const;
  inline void clear_npids();
  static const int kNpidsFieldNumber = 1;
  inline ::google::protobuf::uint64 npids(int index) const;
  inline void set_npids(int index, ::google::protobuf::uint64 value);
  inline void add_npids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      npids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_npids();

  // @@protoc_insertion_point(class_scope:FriendsGetProfileDataMessage)
 private:

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > npids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsGetProfileDataMessage* default_instance_;
};
// -------------------------------------------------------------------

class ProfileDataResult : public ::google::protobuf::MessageLite {
 public:
  ProfileDataResult();
  virtual ~ProfileDataResult();

  ProfileDataResult(const ProfileDataResult& from);

  inline ProfileDataResult& operator=(const ProfileDataResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ProfileDataResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ProfileDataResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ProfileDataResult* other);

  // implements Message ----------------------------------------------

  ProfileDataResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ProfileDataResult& from);
  void MergeFrom(const ProfileDataResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 npid = 1;
  inline bool has_npid() const;
  inline void clear_npid();
  static const int kNpidFieldNumber = 1;
  inline ::google::protobuf::uint64 npid() const;
  inline void set_npid(::google::protobuf::uint64 value);

  // optional bytes profile = 2;
  inline bool has_profile() const;
  inline void clear_profile();
  static const int kProfileFieldNumber = 2;
  inline const ::std::string& profile() const;
  inline void set_profile(const ::std::string& value);
  inline void set_profile(const char* value);
  inline void set_profile(const void* value, size_t size);
  inline ::std::string* mutable_profile();
  inline ::std::string* release_profile();
  inline void set_allocated_profile(::std::string* profile);

  // @@protoc_insertion_point(class_scope:ProfileDataResult)
 private:
  inline void set_has_npid();
  inline void clear_has_npid();
  inline void set_has_profile();
  inline void clear_has_profile();

  ::google::protobuf::uint64 npid_;
  ::std::string* profile_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static ProfileDataResult* default_instance_;
};
// -------------------------------------------------------------------

class FriendsGetProfileDataResultMessage : public ::google::protobuf::MessageLite {
 public:
  FriendsGetProfileDataResultMessage();
  virtual ~FriendsGetProfileDataResultMessage();

  FriendsGetProfileDataResultMessage(const FriendsGetProfileDataResultMessage& from);

  inline FriendsGetProfileDataResultMessage& operator=(const FriendsGetProfileDataResultMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const FriendsGetProfileDataResultMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsGetProfileDataResultMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsGetProfileDataResultMessage* other);

  // implements Message ----------------------------------------------

  FriendsGetProfileDataResultMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsGetProfileDataResultMessage& from);
  void MergeFrom(const FriendsGetProfileDataResultMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProfileDataResult results = 1;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 1;
  inline const ::ProfileDataResult& results(int index) const;
  inline ::ProfileDataResult* mutable_results(int index);
  inline ::ProfileDataResult* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::ProfileDataResult >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProfileDataResult >*
      mutable_results();

  // @@protoc_insertion_point(class_scope:FriendsGetProfileDataResultMessage)
 private:

  ::google::protobuf::RepeatedPtrField< ::ProfileDataResult > results_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsGetProfileDataResultMessage* default_instance_;
};
// -------------------------------------------------------------------

class FriendDetails : public ::google::protobuf::MessageLite {
 public:
  FriendDetails();
  virtual ~FriendDetails();

  FriendDetails(const FriendDetails& from);

  inline FriendDetails& operator=(const FriendDetails& from) {
    CopyFrom(from);
    return *this;
  }

  static const FriendDetails& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendDetails* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendDetails* other);

  // implements Message ----------------------------------------------

  FriendDetails* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendDetails& from);
  void MergeFrom(const FriendDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 npid = 1;
  inline bool has_npid() const;
  inline void clear_npid();
  static const int kNpidFieldNumber = 1;
  inline ::google::protobuf::uint64 npid() const;
  inline void set_npid(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:FriendDetails)
 private:
  inline void set_has_npid();
  inline void clear_has_npid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::uint64 npid_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendDetails* default_instance_;
};
// -------------------------------------------------------------------

class FriendsRosterMessage : public ::google::protobuf::MessageLite {
 public:
  FriendsRosterMessage();
  virtual ~FriendsRosterMessage();

  FriendsRosterMessage(const FriendsRosterMessage& from);

  inline FriendsRosterMessage& operator=(const FriendsRosterMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const FriendsRosterMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsRosterMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsRosterMessage* other);

  // implements Message ----------------------------------------------

  FriendsRosterMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsRosterMessage& from);
  void MergeFrom(const FriendsRosterMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FriendDetails friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::FriendDetails& friends(int index) const;
  inline ::FriendDetails* mutable_friends(int index);
  inline ::FriendDetails* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::FriendDetails >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::FriendDetails >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:FriendsRosterMessage)
 private:

  ::google::protobuf::RepeatedPtrField< ::FriendDetails > friends_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsRosterMessage* default_instance_;
};
// -------------------------------------------------------------------

class FriendsPresence : public ::google::protobuf::MessageLite {
 public:
  FriendsPresence();
  virtual ~FriendsPresence();

  FriendsPresence(const FriendsPresence& from);

  inline FriendsPresence& operator=(const FriendsPresence& from) {
    CopyFrom(from);
    return *this;
  }

  static const FriendsPresence& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsPresence* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsPresence* other);

  // implements Message ----------------------------------------------

  FriendsPresence* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsPresence& from);
  void MergeFrom(const FriendsPresence& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:FriendsPresence)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsPresence* default_instance_;
};
// -------------------------------------------------------------------

class FriendsPresenceMessage : public ::google::protobuf::MessageLite {
 public:
  FriendsPresenceMessage();
  virtual ~FriendsPresenceMessage();

  FriendsPresenceMessage(const FriendsPresenceMessage& from);

  inline FriendsPresenceMessage& operator=(const FriendsPresenceMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const FriendsPresenceMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsPresenceMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsPresenceMessage* other);

  // implements Message ----------------------------------------------

  FriendsPresenceMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsPresenceMessage& from);
  void MergeFrom(const FriendsPresenceMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 friend = 1;
  inline bool has_friend_() const;
  inline void clear_friend_();
  static const int kFriendFieldNumber = 1;
  inline ::google::protobuf::uint64 friend_() const;
  inline void set_friend_(::google::protobuf::uint64 value);

  // required int32 presenceState = 2;
  inline bool has_presencestate() const;
  inline void clear_presencestate();
  static const int kPresenceStateFieldNumber = 2;
  inline ::google::protobuf::int32 presencestate() const;
  inline void set_presencestate(::google::protobuf::int32 value);

  // optional fixed64 currentServer = 3;
  inline bool has_currentserver() const;
  inline void clear_currentserver();
  static const int kCurrentServerFieldNumber = 3;
  inline ::google::protobuf::uint64 currentserver() const;
  inline void set_currentserver(::google::protobuf::uint64 value);

  // repeated .FriendsPresence presence = 4;
  inline int presence_size() const;
  inline void clear_presence();
  static const int kPresenceFieldNumber = 4;
  inline const ::FriendsPresence& presence(int index) const;
  inline ::FriendsPresence* mutable_presence(int index);
  inline ::FriendsPresence* add_presence();
  inline const ::google::protobuf::RepeatedPtrField< ::FriendsPresence >&
      presence() const;
  inline ::google::protobuf::RepeatedPtrField< ::FriendsPresence >*
      mutable_presence();

  // @@protoc_insertion_point(class_scope:FriendsPresenceMessage)
 private:
  inline void set_has_friend_();
  inline void clear_has_friend_();
  inline void set_has_presencestate();
  inline void clear_has_presencestate();
  inline void set_has_currentserver();
  inline void clear_has_currentserver();

  ::google::protobuf::uint64 friend__;
  ::google::protobuf::uint64 currentserver_;
  ::google::protobuf::RepeatedPtrField< ::FriendsPresence > presence_;
  ::google::protobuf::int32 presencestate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsPresenceMessage* default_instance_;
};
// -------------------------------------------------------------------

class FriendsSetPresenceMessage : public ::google::protobuf::MessageLite {
 public:
  FriendsSetPresenceMessage();
  virtual ~FriendsSetPresenceMessage();

  FriendsSetPresenceMessage(const FriendsSetPresenceMessage& from);

  inline FriendsSetPresenceMessage& operator=(const FriendsSetPresenceMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const FriendsSetPresenceMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsSetPresenceMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsSetPresenceMessage* other);

  // implements Message ----------------------------------------------

  FriendsSetPresenceMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsSetPresenceMessage& from);
  void MergeFrom(const FriendsSetPresenceMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FriendsPresence presence = 1;
  inline int presence_size() const;
  inline void clear_presence();
  static const int kPresenceFieldNumber = 1;
  inline const ::FriendsPresence& presence(int index) const;
  inline ::FriendsPresence* mutable_presence(int index);
  inline ::FriendsPresence* add_presence();
  inline const ::google::protobuf::RepeatedPtrField< ::FriendsPresence >&
      presence() const;
  inline ::google::protobuf::RepeatedPtrField< ::FriendsPresence >*
      mutable_presence();

  // @@protoc_insertion_point(class_scope:FriendsSetPresenceMessage)
 private:

  ::google::protobuf::RepeatedPtrField< ::FriendsPresence > presence_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsSetPresenceMessage* default_instance_;
};
// -------------------------------------------------------------------

class FriendsGetUserAvatarMessage : public ::google::protobuf::MessageLite {
 public:
  FriendsGetUserAvatarMessage();
  virtual ~FriendsGetUserAvatarMessage();

  FriendsGetUserAvatarMessage(const FriendsGetUserAvatarMessage& from);

  inline FriendsGetUserAvatarMessage& operator=(const FriendsGetUserAvatarMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const FriendsGetUserAvatarMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsGetUserAvatarMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsGetUserAvatarMessage* other);

  // implements Message ----------------------------------------------

  FriendsGetUserAvatarMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsGetUserAvatarMessage& from);
  void MergeFrom(const FriendsGetUserAvatarMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::int32 guid() const;
  inline void set_guid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendsGetUserAvatarMessage)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::int32 guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsGetUserAvatarMessage* default_instance_;
};
// -------------------------------------------------------------------

class FriendsGetUserAvatarResultMessage : public ::google::protobuf::MessageLite {
 public:
  FriendsGetUserAvatarResultMessage();
  virtual ~FriendsGetUserAvatarResultMessage();

  FriendsGetUserAvatarResultMessage(const FriendsGetUserAvatarResultMessage& from);

  inline FriendsGetUserAvatarResultMessage& operator=(const FriendsGetUserAvatarResultMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const FriendsGetUserAvatarResultMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FriendsGetUserAvatarResultMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FriendsGetUserAvatarResultMessage* other);

  // implements Message ----------------------------------------------

  FriendsGetUserAvatarResultMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FriendsGetUserAvatarResultMessage& from);
  void MergeFrom(const FriendsGetUserAvatarResultMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::int32 guid() const;
  inline void set_guid(::google::protobuf::int32 value);

  // required bytes fileData = 3;
  inline bool has_filedata() const;
  inline void clear_filedata();
  static const int kFileDataFieldNumber = 3;
  inline const ::std::string& filedata() const;
  inline void set_filedata(const ::std::string& value);
  inline void set_filedata(const char* value);
  inline void set_filedata(const void* value, size_t size);
  inline ::std::string* mutable_filedata();
  inline ::std::string* release_filedata();
  inline void set_allocated_filedata(::std::string* filedata);

  // @@protoc_insertion_point(class_scope:FriendsGetUserAvatarResultMessage)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_filedata();
  inline void clear_has_filedata();

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 guid_;
  ::std::string* filedata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_friends_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_friends_2eproto();
  #endif
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static FriendsGetUserAvatarResultMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// FriendsSetSteamIDMessage

// required fixed64 steamID = 1;
inline bool FriendsSetSteamIDMessage::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendsSetSteamIDMessage::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendsSetSteamIDMessage::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendsSetSteamIDMessage::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 FriendsSetSteamIDMessage::steamid() const {
  return steamid_;
}
inline void FriendsSetSteamIDMessage::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// -------------------------------------------------------------------

// FriendsGetProfileDataMessage

// repeated fixed64 npids = 1;
inline int FriendsGetProfileDataMessage::npids_size() const {
  return npids_.size();
}
inline void FriendsGetProfileDataMessage::clear_npids() {
  npids_.Clear();
}
inline ::google::protobuf::uint64 FriendsGetProfileDataMessage::npids(int index) const {
  return npids_.Get(index);
}
inline void FriendsGetProfileDataMessage::set_npids(int index, ::google::protobuf::uint64 value) {
  npids_.Set(index, value);
}
inline void FriendsGetProfileDataMessage::add_npids(::google::protobuf::uint64 value) {
  npids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FriendsGetProfileDataMessage::npids() const {
  return npids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FriendsGetProfileDataMessage::mutable_npids() {
  return &npids_;
}

// -------------------------------------------------------------------

// ProfileDataResult

// optional fixed64 npid = 1;
inline bool ProfileDataResult::has_npid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfileDataResult::set_has_npid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfileDataResult::clear_has_npid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfileDataResult::clear_npid() {
  npid_ = GOOGLE_ULONGLONG(0);
  clear_has_npid();
}
inline ::google::protobuf::uint64 ProfileDataResult::npid() const {
  return npid_;
}
inline void ProfileDataResult::set_npid(::google::protobuf::uint64 value) {
  set_has_npid();
  npid_ = value;
}

// optional bytes profile = 2;
inline bool ProfileDataResult::has_profile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfileDataResult::set_has_profile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfileDataResult::clear_has_profile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfileDataResult::clear_profile() {
  if (profile_ != &::google::protobuf::internal::kEmptyString) {
    profile_->clear();
  }
  clear_has_profile();
}
inline const ::std::string& ProfileDataResult::profile() const {
  return *profile_;
}
inline void ProfileDataResult::set_profile(const ::std::string& value) {
  set_has_profile();
  if (profile_ == &::google::protobuf::internal::kEmptyString) {
    profile_ = new ::std::string;
  }
  profile_->assign(value);
}
inline void ProfileDataResult::set_profile(const char* value) {
  set_has_profile();
  if (profile_ == &::google::protobuf::internal::kEmptyString) {
    profile_ = new ::std::string;
  }
  profile_->assign(value);
}
inline void ProfileDataResult::set_profile(const void* value, size_t size) {
  set_has_profile();
  if (profile_ == &::google::protobuf::internal::kEmptyString) {
    profile_ = new ::std::string;
  }
  profile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProfileDataResult::mutable_profile() {
  set_has_profile();
  if (profile_ == &::google::protobuf::internal::kEmptyString) {
    profile_ = new ::std::string;
  }
  return profile_;
}
inline ::std::string* ProfileDataResult::release_profile() {
  clear_has_profile();
  if (profile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = profile_;
    profile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProfileDataResult::set_allocated_profile(::std::string* profile) {
  if (profile_ != &::google::protobuf::internal::kEmptyString) {
    delete profile_;
  }
  if (profile) {
    set_has_profile();
    profile_ = profile;
  } else {
    clear_has_profile();
    profile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FriendsGetProfileDataResultMessage

// repeated .ProfileDataResult results = 1;
inline int FriendsGetProfileDataResultMessage::results_size() const {
  return results_.size();
}
inline void FriendsGetProfileDataResultMessage::clear_results() {
  results_.Clear();
}
inline const ::ProfileDataResult& FriendsGetProfileDataResultMessage::results(int index) const {
  return results_.Get(index);
}
inline ::ProfileDataResult* FriendsGetProfileDataResultMessage::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::ProfileDataResult* FriendsGetProfileDataResultMessage::add_results() {
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProfileDataResult >&
FriendsGetProfileDataResultMessage::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProfileDataResult >*
FriendsGetProfileDataResultMessage::mutable_results() {
  return &results_;
}

// -------------------------------------------------------------------

// FriendDetails

// optional fixed64 npid = 1;
inline bool FriendDetails::has_npid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendDetails::set_has_npid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendDetails::clear_has_npid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendDetails::clear_npid() {
  npid_ = GOOGLE_ULONGLONG(0);
  clear_has_npid();
}
inline ::google::protobuf::uint64 FriendDetails::npid() const {
  return npid_;
}
inline void FriendDetails::set_npid(::google::protobuf::uint64 value) {
  set_has_npid();
  npid_ = value;
}

// optional string name = 2;
inline bool FriendDetails::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendDetails::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendDetails::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FriendDetails::name() const {
  return *name_;
}
inline void FriendDetails::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendDetails::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendDetails::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendDetails::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FriendDetails::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendDetails::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FriendsRosterMessage

// repeated .FriendDetails friends = 1;
inline int FriendsRosterMessage::friends_size() const {
  return friends_.size();
}
inline void FriendsRosterMessage::clear_friends() {
  friends_.Clear();
}
inline const ::FriendDetails& FriendsRosterMessage::friends(int index) const {
  return friends_.Get(index);
}
inline ::FriendDetails* FriendsRosterMessage::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::FriendDetails* FriendsRosterMessage::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FriendDetails >&
FriendsRosterMessage::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::FriendDetails >*
FriendsRosterMessage::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// FriendsPresence

// required string key = 1;
inline bool FriendsPresence::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendsPresence::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendsPresence::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendsPresence::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& FriendsPresence::key() const {
  return *key_;
}
inline void FriendsPresence::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void FriendsPresence::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void FriendsPresence::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendsPresence::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* FriendsPresence::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendsPresence::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string value = 2;
inline bool FriendsPresence::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendsPresence::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendsPresence::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendsPresence::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& FriendsPresence::value() const {
  return *value_;
}
inline void FriendsPresence::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void FriendsPresence::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void FriendsPresence::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendsPresence::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* FriendsPresence::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendsPresence::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FriendsPresenceMessage

// required fixed64 friend = 1;
inline bool FriendsPresenceMessage::has_friend_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendsPresenceMessage::set_has_friend_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendsPresenceMessage::clear_has_friend_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendsPresenceMessage::clear_friend_() {
  friend__ = GOOGLE_ULONGLONG(0);
  clear_has_friend_();
}
inline ::google::protobuf::uint64 FriendsPresenceMessage::friend_() const {
  return friend__;
}
inline void FriendsPresenceMessage::set_friend_(::google::protobuf::uint64 value) {
  set_has_friend_();
  friend__ = value;
}

// required int32 presenceState = 2;
inline bool FriendsPresenceMessage::has_presencestate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendsPresenceMessage::set_has_presencestate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendsPresenceMessage::clear_has_presencestate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendsPresenceMessage::clear_presencestate() {
  presencestate_ = 0;
  clear_has_presencestate();
}
inline ::google::protobuf::int32 FriendsPresenceMessage::presencestate() const {
  return presencestate_;
}
inline void FriendsPresenceMessage::set_presencestate(::google::protobuf::int32 value) {
  set_has_presencestate();
  presencestate_ = value;
}

// optional fixed64 currentServer = 3;
inline bool FriendsPresenceMessage::has_currentserver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendsPresenceMessage::set_has_currentserver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendsPresenceMessage::clear_has_currentserver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendsPresenceMessage::clear_currentserver() {
  currentserver_ = GOOGLE_ULONGLONG(0);
  clear_has_currentserver();
}
inline ::google::protobuf::uint64 FriendsPresenceMessage::currentserver() const {
  return currentserver_;
}
inline void FriendsPresenceMessage::set_currentserver(::google::protobuf::uint64 value) {
  set_has_currentserver();
  currentserver_ = value;
}

// repeated .FriendsPresence presence = 4;
inline int FriendsPresenceMessage::presence_size() const {
  return presence_.size();
}
inline void FriendsPresenceMessage::clear_presence() {
  presence_.Clear();
}
inline const ::FriendsPresence& FriendsPresenceMessage::presence(int index) const {
  return presence_.Get(index);
}
inline ::FriendsPresence* FriendsPresenceMessage::mutable_presence(int index) {
  return presence_.Mutable(index);
}
inline ::FriendsPresence* FriendsPresenceMessage::add_presence() {
  return presence_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FriendsPresence >&
FriendsPresenceMessage::presence() const {
  return presence_;
}
inline ::google::protobuf::RepeatedPtrField< ::FriendsPresence >*
FriendsPresenceMessage::mutable_presence() {
  return &presence_;
}

// -------------------------------------------------------------------

// FriendsSetPresenceMessage

// repeated .FriendsPresence presence = 1;
inline int FriendsSetPresenceMessage::presence_size() const {
  return presence_.size();
}
inline void FriendsSetPresenceMessage::clear_presence() {
  presence_.Clear();
}
inline const ::FriendsPresence& FriendsSetPresenceMessage::presence(int index) const {
  return presence_.Get(index);
}
inline ::FriendsPresence* FriendsSetPresenceMessage::mutable_presence(int index) {
  return presence_.Mutable(index);
}
inline ::FriendsPresence* FriendsSetPresenceMessage::add_presence() {
  return presence_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FriendsPresence >&
FriendsSetPresenceMessage::presence() const {
  return presence_;
}
inline ::google::protobuf::RepeatedPtrField< ::FriendsPresence >*
FriendsSetPresenceMessage::mutable_presence() {
  return &presence_;
}

// -------------------------------------------------------------------

// FriendsGetUserAvatarMessage

// required int32 guid = 2;
inline bool FriendsGetUserAvatarMessage::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendsGetUserAvatarMessage::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendsGetUserAvatarMessage::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendsGetUserAvatarMessage::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 FriendsGetUserAvatarMessage::guid() const {
  return guid_;
}
inline void FriendsGetUserAvatarMessage::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
}

// -------------------------------------------------------------------

// FriendsGetUserAvatarResultMessage

// required int32 result = 1;
inline bool FriendsGetUserAvatarResultMessage::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendsGetUserAvatarResultMessage::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendsGetUserAvatarResultMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendsGetUserAvatarResultMessage::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendsGetUserAvatarResultMessage::result() const {
  return result_;
}
inline void FriendsGetUserAvatarResultMessage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 guid = 2;
inline bool FriendsGetUserAvatarResultMessage::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendsGetUserAvatarResultMessage::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendsGetUserAvatarResultMessage::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendsGetUserAvatarResultMessage::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 FriendsGetUserAvatarResultMessage::guid() const {
  return guid_;
}
inline void FriendsGetUserAvatarResultMessage::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
}

// required bytes fileData = 3;
inline bool FriendsGetUserAvatarResultMessage::has_filedata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendsGetUserAvatarResultMessage::set_has_filedata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendsGetUserAvatarResultMessage::clear_has_filedata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendsGetUserAvatarResultMessage::clear_filedata() {
  if (filedata_ != &::google::protobuf::internal::kEmptyString) {
    filedata_->clear();
  }
  clear_has_filedata();
}
inline const ::std::string& FriendsGetUserAvatarResultMessage::filedata() const {
  return *filedata_;
}
inline void FriendsGetUserAvatarResultMessage::set_filedata(const ::std::string& value) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(value);
}
inline void FriendsGetUserAvatarResultMessage::set_filedata(const char* value) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(value);
}
inline void FriendsGetUserAvatarResultMessage::set_filedata(const void* value, size_t size) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendsGetUserAvatarResultMessage::mutable_filedata() {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  return filedata_;
}
inline ::std::string* FriendsGetUserAvatarResultMessage::release_filedata() {
  clear_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filedata_;
    filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendsGetUserAvatarResultMessage::set_allocated_filedata(::std::string* filedata) {
  if (filedata_ != &::google::protobuf::internal::kEmptyString) {
    delete filedata_;
  }
  if (filedata) {
    set_has_filedata();
    filedata_ = filedata;
  } else {
    clear_has_filedata();
    filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friends_2eproto__INCLUDED
