// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friends.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friends.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_friends_2eproto() {
  delete FriendsSetSteamIDMessage::default_instance_;
  delete FriendsGetProfileDataMessage::default_instance_;
  delete ProfileDataResult::default_instance_;
  delete FriendsGetProfileDataResultMessage::default_instance_;
  delete FriendDetails::default_instance_;
  delete FriendsRosterMessage::default_instance_;
  delete FriendsPresence::default_instance_;
  delete FriendsPresenceMessage::default_instance_;
  delete FriendsSetPresenceMessage::default_instance_;
  delete FriendsGetUserAvatarMessage::default_instance_;
  delete FriendsGetUserAvatarResultMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_friends_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_friends_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  FriendsSetSteamIDMessage::default_instance_ = new FriendsSetSteamIDMessage();
  FriendsGetProfileDataMessage::default_instance_ = new FriendsGetProfileDataMessage();
  ProfileDataResult::default_instance_ = new ProfileDataResult();
  FriendsGetProfileDataResultMessage::default_instance_ = new FriendsGetProfileDataResultMessage();
  FriendDetails::default_instance_ = new FriendDetails();
  FriendsRosterMessage::default_instance_ = new FriendsRosterMessage();
  FriendsPresence::default_instance_ = new FriendsPresence();
  FriendsPresenceMessage::default_instance_ = new FriendsPresenceMessage();
  FriendsSetPresenceMessage::default_instance_ = new FriendsSetPresenceMessage();
  FriendsGetUserAvatarMessage::default_instance_ = new FriendsGetUserAvatarMessage();
  FriendsGetUserAvatarResultMessage::default_instance_ = new FriendsGetUserAvatarResultMessage();
  FriendsSetSteamIDMessage::default_instance_->InitAsDefaultInstance();
  FriendsGetProfileDataMessage::default_instance_->InitAsDefaultInstance();
  ProfileDataResult::default_instance_->InitAsDefaultInstance();
  FriendsGetProfileDataResultMessage::default_instance_->InitAsDefaultInstance();
  FriendDetails::default_instance_->InitAsDefaultInstance();
  FriendsRosterMessage::default_instance_->InitAsDefaultInstance();
  FriendsPresence::default_instance_->InitAsDefaultInstance();
  FriendsPresenceMessage::default_instance_->InitAsDefaultInstance();
  FriendsSetPresenceMessage::default_instance_->InitAsDefaultInstance();
  FriendsGetUserAvatarMessage::default_instance_->InitAsDefaultInstance();
  FriendsGetUserAvatarResultMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friends_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_friends_2eproto_once_);
void protobuf_AddDesc_friends_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_friends_2eproto_once_,
                 &protobuf_AddDesc_friends_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friends_2eproto {
  StaticDescriptorInitializer_friends_2eproto() {
    protobuf_AddDesc_friends_2eproto();
  }
} static_descriptor_initializer_friends_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int FriendsSetSteamIDMessage::kSteamIDFieldNumber;
#endif  // !_MSC_VER

FriendsSetSteamIDMessage::FriendsSetSteamIDMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendsSetSteamIDMessage::InitAsDefaultInstance() {
}

FriendsSetSteamIDMessage::FriendsSetSteamIDMessage(const FriendsSetSteamIDMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsSetSteamIDMessage::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsSetSteamIDMessage::~FriendsSetSteamIDMessage() {
  SharedDtor();
}

void FriendsSetSteamIDMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsSetSteamIDMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsSetSteamIDMessage& FriendsSetSteamIDMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsSetSteamIDMessage* FriendsSetSteamIDMessage::default_instance_ = NULL;

FriendsSetSteamIDMessage* FriendsSetSteamIDMessage::New() const {
  return new FriendsSetSteamIDMessage;
}

void FriendsSetSteamIDMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendsSetSteamIDMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 steamID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsSetSteamIDMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 steamID = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

}

int FriendsSetSteamIDMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 steamID = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsSetSteamIDMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsSetSteamIDMessage*>(&from));
}

void FriendsSetSteamIDMessage::MergeFrom(const FriendsSetSteamIDMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
  }
}

void FriendsSetSteamIDMessage::CopyFrom(const FriendsSetSteamIDMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsSetSteamIDMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FriendsSetSteamIDMessage::Swap(FriendsSetSteamIDMessage* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsSetSteamIDMessage::GetTypeName() const {
  return "FriendsSetSteamIDMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsGetProfileDataMessage::kNpidsFieldNumber;
#endif  // !_MSC_VER

FriendsGetProfileDataMessage::FriendsGetProfileDataMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendsGetProfileDataMessage::InitAsDefaultInstance() {
}

FriendsGetProfileDataMessage::FriendsGetProfileDataMessage(const FriendsGetProfileDataMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsGetProfileDataMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsGetProfileDataMessage::~FriendsGetProfileDataMessage() {
  SharedDtor();
}

void FriendsGetProfileDataMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsGetProfileDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsGetProfileDataMessage& FriendsGetProfileDataMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsGetProfileDataMessage* FriendsGetProfileDataMessage::default_instance_ = NULL;

FriendsGetProfileDataMessage* FriendsGetProfileDataMessage::New() const {
  return new FriendsGetProfileDataMessage;
}

void FriendsGetProfileDataMessage::Clear() {
  npids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendsGetProfileDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 npids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_npids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_npids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_npids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_npids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsGetProfileDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 npids = 1;
  for (int i = 0; i < this->npids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->npids(i), output);
  }

}

int FriendsGetProfileDataMessage::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 npids = 1;
  {
    int data_size = 0;
    data_size = 8 * this->npids_size();
    total_size += 1 * this->npids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsGetProfileDataMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsGetProfileDataMessage*>(&from));
}

void FriendsGetProfileDataMessage::MergeFrom(const FriendsGetProfileDataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  npids_.MergeFrom(from.npids_);
}

void FriendsGetProfileDataMessage::CopyFrom(const FriendsGetProfileDataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsGetProfileDataMessage::IsInitialized() const {

  return true;
}

void FriendsGetProfileDataMessage::Swap(FriendsGetProfileDataMessage* other) {
  if (other != this) {
    npids_.Swap(&other->npids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsGetProfileDataMessage::GetTypeName() const {
  return "FriendsGetProfileDataMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int ProfileDataResult::kNpidFieldNumber;
const int ProfileDataResult::kProfileFieldNumber;
#endif  // !_MSC_VER

ProfileDataResult::ProfileDataResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ProfileDataResult::InitAsDefaultInstance() {
}

ProfileDataResult::ProfileDataResult(const ProfileDataResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ProfileDataResult::SharedCtor() {
  _cached_size_ = 0;
  npid_ = GOOGLE_ULONGLONG(0);
  profile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfileDataResult::~ProfileDataResult() {
  SharedDtor();
}

void ProfileDataResult::SharedDtor() {
  if (profile_ != &::google::protobuf::internal::kEmptyString) {
    delete profile_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ProfileDataResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProfileDataResult& ProfileDataResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

ProfileDataResult* ProfileDataResult::default_instance_ = NULL;

ProfileDataResult* ProfileDataResult::New() const {
  return new ProfileDataResult;
}

void ProfileDataResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npid_ = GOOGLE_ULONGLONG(0);
    if (has_profile()) {
      if (profile_ != &::google::protobuf::internal::kEmptyString) {
        profile_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ProfileDataResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 npid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_profile;
        break;
      }

      // optional bytes profile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_profile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProfileDataResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 npid = 1;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->npid(), output);
  }

  // optional bytes profile = 2;
  if (has_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->profile(), output);
  }

}

int ProfileDataResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 npid = 1;
    if (has_npid()) {
      total_size += 1 + 8;
    }

    // optional bytes profile = 2;
    if (has_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->profile());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileDataResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProfileDataResult*>(&from));
}

void ProfileDataResult::MergeFrom(const ProfileDataResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npid()) {
      set_npid(from.npid());
    }
    if (from.has_profile()) {
      set_profile(from.profile());
    }
  }
}

void ProfileDataResult::CopyFrom(const ProfileDataResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileDataResult::IsInitialized() const {

  return true;
}

void ProfileDataResult::Swap(ProfileDataResult* other) {
  if (other != this) {
    std::swap(npid_, other->npid_);
    std::swap(profile_, other->profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProfileDataResult::GetTypeName() const {
  return "ProfileDataResult";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsGetProfileDataResultMessage::kResultsFieldNumber;
#endif  // !_MSC_VER

FriendsGetProfileDataResultMessage::FriendsGetProfileDataResultMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendsGetProfileDataResultMessage::InitAsDefaultInstance() {
}

FriendsGetProfileDataResultMessage::FriendsGetProfileDataResultMessage(const FriendsGetProfileDataResultMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsGetProfileDataResultMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsGetProfileDataResultMessage::~FriendsGetProfileDataResultMessage() {
  SharedDtor();
}

void FriendsGetProfileDataResultMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsGetProfileDataResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsGetProfileDataResultMessage& FriendsGetProfileDataResultMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsGetProfileDataResultMessage* FriendsGetProfileDataResultMessage::default_instance_ = NULL;

FriendsGetProfileDataResultMessage* FriendsGetProfileDataResultMessage::New() const {
  return new FriendsGetProfileDataResultMessage;
}

void FriendsGetProfileDataResultMessage::Clear() {
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendsGetProfileDataResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProfileDataResult results = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_results;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsGetProfileDataResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProfileDataResult results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->results(i), output);
  }

}

int FriendsGetProfileDataResultMessage::ByteSize() const {
  int total_size = 0;

  // repeated .ProfileDataResult results = 1;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsGetProfileDataResultMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsGetProfileDataResultMessage*>(&from));
}

void FriendsGetProfileDataResultMessage::MergeFrom(const FriendsGetProfileDataResultMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
}

void FriendsGetProfileDataResultMessage::CopyFrom(const FriendsGetProfileDataResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsGetProfileDataResultMessage::IsInitialized() const {

  return true;
}

void FriendsGetProfileDataResultMessage::Swap(FriendsGetProfileDataResultMessage* other) {
  if (other != this) {
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsGetProfileDataResultMessage::GetTypeName() const {
  return "FriendsGetProfileDataResultMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendDetails::kNpidFieldNumber;
const int FriendDetails::kNameFieldNumber;
#endif  // !_MSC_VER

FriendDetails::FriendDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendDetails::InitAsDefaultInstance() {
}

FriendDetails::FriendDetails(const FriendDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendDetails::SharedCtor() {
  _cached_size_ = 0;
  npid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendDetails::~FriendDetails() {
  SharedDtor();
}

void FriendDetails::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendDetails& FriendDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendDetails* FriendDetails::default_instance_ = NULL;

FriendDetails* FriendDetails::New() const {
  return new FriendDetails;
}

void FriendDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 npid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 npid = 1;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->npid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

}

int FriendDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 npid = 1;
    if (has_npid()) {
      total_size += 1 + 8;
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendDetails*>(&from));
}

void FriendDetails::MergeFrom(const FriendDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npid()) {
      set_npid(from.npid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void FriendDetails::CopyFrom(const FriendDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDetails::IsInitialized() const {

  return true;
}

void FriendDetails::Swap(FriendDetails* other) {
  if (other != this) {
    std::swap(npid_, other->npid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendDetails::GetTypeName() const {
  return "FriendDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsRosterMessage::kFriendsFieldNumber;
#endif  // !_MSC_VER

FriendsRosterMessage::FriendsRosterMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendsRosterMessage::InitAsDefaultInstance() {
}

FriendsRosterMessage::FriendsRosterMessage(const FriendsRosterMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsRosterMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsRosterMessage::~FriendsRosterMessage() {
  SharedDtor();
}

void FriendsRosterMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsRosterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsRosterMessage& FriendsRosterMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsRosterMessage* FriendsRosterMessage::default_instance_ = NULL;

FriendsRosterMessage* FriendsRosterMessage::New() const {
  return new FriendsRosterMessage;
}

void FriendsRosterMessage::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendsRosterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FriendDetails friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsRosterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FriendDetails friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->friends(i), output);
  }

}

int FriendsRosterMessage::ByteSize() const {
  int total_size = 0;

  // repeated .FriendDetails friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsRosterMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsRosterMessage*>(&from));
}

void FriendsRosterMessage::MergeFrom(const FriendsRosterMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
}

void FriendsRosterMessage::CopyFrom(const FriendsRosterMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsRosterMessage::IsInitialized() const {

  return true;
}

void FriendsRosterMessage::Swap(FriendsRosterMessage* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsRosterMessage::GetTypeName() const {
  return "FriendsRosterMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsPresence::kKeyFieldNumber;
const int FriendsPresence::kValueFieldNumber;
#endif  // !_MSC_VER

FriendsPresence::FriendsPresence()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendsPresence::InitAsDefaultInstance() {
}

FriendsPresence::FriendsPresence(const FriendsPresence& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsPresence::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsPresence::~FriendsPresence() {
  SharedDtor();
}

void FriendsPresence::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsPresence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsPresence& FriendsPresence::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsPresence* FriendsPresence::default_instance_ = NULL;

FriendsPresence* FriendsPresence::New() const {
  return new FriendsPresence;
}

void FriendsPresence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendsPresence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsPresence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

}

int FriendsPresence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsPresence::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsPresence*>(&from));
}

void FriendsPresence::MergeFrom(const FriendsPresence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void FriendsPresence::CopyFrom(const FriendsPresence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsPresence::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FriendsPresence::Swap(FriendsPresence* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsPresence::GetTypeName() const {
  return "FriendsPresence";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsPresenceMessage::kFriendFieldNumber;
const int FriendsPresenceMessage::kPresenceStateFieldNumber;
const int FriendsPresenceMessage::kCurrentServerFieldNumber;
const int FriendsPresenceMessage::kPresenceFieldNumber;
#endif  // !_MSC_VER

FriendsPresenceMessage::FriendsPresenceMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendsPresenceMessage::InitAsDefaultInstance() {
}

FriendsPresenceMessage::FriendsPresenceMessage(const FriendsPresenceMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsPresenceMessage::SharedCtor() {
  _cached_size_ = 0;
  friend__ = GOOGLE_ULONGLONG(0);
  presencestate_ = 0;
  currentserver_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsPresenceMessage::~FriendsPresenceMessage() {
  SharedDtor();
}

void FriendsPresenceMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsPresenceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsPresenceMessage& FriendsPresenceMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsPresenceMessage* FriendsPresenceMessage::default_instance_ = NULL;

FriendsPresenceMessage* FriendsPresenceMessage::New() const {
  return new FriendsPresenceMessage;
}

void FriendsPresenceMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend__ = GOOGLE_ULONGLONG(0);
    presencestate_ = 0;
    currentserver_ = GOOGLE_ULONGLONG(0);
  }
  presence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendsPresenceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 friend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friend__)));
          set_has_friend_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_presenceState;
        break;
      }

      // required int32 presenceState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presenceState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presencestate_)));
          set_has_presencestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_currentServer;
        break;
      }

      // optional fixed64 currentServer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_currentServer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &currentserver_)));
          set_has_currentserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_presence;
        break;
      }

      // repeated .FriendsPresence presence = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_presence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_presence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_presence;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsPresenceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 friend = 1;
  if (has_friend_()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friend_(), output);
  }

  // required int32 presenceState = 2;
  if (has_presencestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->presencestate(), output);
  }

  // optional fixed64 currentServer = 3;
  if (has_currentserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->currentserver(), output);
  }

  // repeated .FriendsPresence presence = 4;
  for (int i = 0; i < this->presence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->presence(i), output);
  }

}

int FriendsPresenceMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 friend = 1;
    if (has_friend_()) {
      total_size += 1 + 8;
    }

    // required int32 presenceState = 2;
    if (has_presencestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presencestate());
    }

    // optional fixed64 currentServer = 3;
    if (has_currentserver()) {
      total_size += 1 + 8;
    }

  }
  // repeated .FriendsPresence presence = 4;
  total_size += 1 * this->presence_size();
  for (int i = 0; i < this->presence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->presence(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsPresenceMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsPresenceMessage*>(&from));
}

void FriendsPresenceMessage::MergeFrom(const FriendsPresenceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  presence_.MergeFrom(from.presence_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_()) {
      set_friend_(from.friend_());
    }
    if (from.has_presencestate()) {
      set_presencestate(from.presencestate());
    }
    if (from.has_currentserver()) {
      set_currentserver(from.currentserver());
    }
  }
}

void FriendsPresenceMessage::CopyFrom(const FriendsPresenceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsPresenceMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < presence_size(); i++) {
    if (!this->presence(i).IsInitialized()) return false;
  }
  return true;
}

void FriendsPresenceMessage::Swap(FriendsPresenceMessage* other) {
  if (other != this) {
    std::swap(friend__, other->friend__);
    std::swap(presencestate_, other->presencestate_);
    std::swap(currentserver_, other->currentserver_);
    presence_.Swap(&other->presence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsPresenceMessage::GetTypeName() const {
  return "FriendsPresenceMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsSetPresenceMessage::kPresenceFieldNumber;
#endif  // !_MSC_VER

FriendsSetPresenceMessage::FriendsSetPresenceMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendsSetPresenceMessage::InitAsDefaultInstance() {
}

FriendsSetPresenceMessage::FriendsSetPresenceMessage(const FriendsSetPresenceMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsSetPresenceMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsSetPresenceMessage::~FriendsSetPresenceMessage() {
  SharedDtor();
}

void FriendsSetPresenceMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsSetPresenceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsSetPresenceMessage& FriendsSetPresenceMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsSetPresenceMessage* FriendsSetPresenceMessage::default_instance_ = NULL;

FriendsSetPresenceMessage* FriendsSetPresenceMessage::New() const {
  return new FriendsSetPresenceMessage;
}

void FriendsSetPresenceMessage::Clear() {
  presence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendsSetPresenceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FriendsPresence presence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_presence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_presence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_presence;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsSetPresenceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FriendsPresence presence = 1;
  for (int i = 0; i < this->presence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->presence(i), output);
  }

}

int FriendsSetPresenceMessage::ByteSize() const {
  int total_size = 0;

  // repeated .FriendsPresence presence = 1;
  total_size += 1 * this->presence_size();
  for (int i = 0; i < this->presence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->presence(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsSetPresenceMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsSetPresenceMessage*>(&from));
}

void FriendsSetPresenceMessage::MergeFrom(const FriendsSetPresenceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  presence_.MergeFrom(from.presence_);
}

void FriendsSetPresenceMessage::CopyFrom(const FriendsSetPresenceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsSetPresenceMessage::IsInitialized() const {

  for (int i = 0; i < presence_size(); i++) {
    if (!this->presence(i).IsInitialized()) return false;
  }
  return true;
}

void FriendsSetPresenceMessage::Swap(FriendsSetPresenceMessage* other) {
  if (other != this) {
    presence_.Swap(&other->presence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsSetPresenceMessage::GetTypeName() const {
  return "FriendsSetPresenceMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsGetUserAvatarMessage::kGuidFieldNumber;
#endif  // !_MSC_VER

FriendsGetUserAvatarMessage::FriendsGetUserAvatarMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendsGetUserAvatarMessage::InitAsDefaultInstance() {
}

FriendsGetUserAvatarMessage::FriendsGetUserAvatarMessage(const FriendsGetUserAvatarMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsGetUserAvatarMessage::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsGetUserAvatarMessage::~FriendsGetUserAvatarMessage() {
  SharedDtor();
}

void FriendsGetUserAvatarMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsGetUserAvatarMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsGetUserAvatarMessage& FriendsGetUserAvatarMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsGetUserAvatarMessage* FriendsGetUserAvatarMessage::default_instance_ = NULL;

FriendsGetUserAvatarMessage* FriendsGetUserAvatarMessage::New() const {
  return new FriendsGetUserAvatarMessage;
}

void FriendsGetUserAvatarMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendsGetUserAvatarMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsGetUserAvatarMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guid(), output);
  }

}

int FriendsGetUserAvatarMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsGetUserAvatarMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsGetUserAvatarMessage*>(&from));
}

void FriendsGetUserAvatarMessage::MergeFrom(const FriendsGetUserAvatarMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
}

void FriendsGetUserAvatarMessage::CopyFrom(const FriendsGetUserAvatarMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsGetUserAvatarMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FriendsGetUserAvatarMessage::Swap(FriendsGetUserAvatarMessage* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsGetUserAvatarMessage::GetTypeName() const {
  return "FriendsGetUserAvatarMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsGetUserAvatarResultMessage::kResultFieldNumber;
const int FriendsGetUserAvatarResultMessage::kGuidFieldNumber;
const int FriendsGetUserAvatarResultMessage::kFileDataFieldNumber;
#endif  // !_MSC_VER

FriendsGetUserAvatarResultMessage::FriendsGetUserAvatarResultMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendsGetUserAvatarResultMessage::InitAsDefaultInstance() {
}

FriendsGetUserAvatarResultMessage::FriendsGetUserAvatarResultMessage(const FriendsGetUserAvatarResultMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsGetUserAvatarResultMessage::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  guid_ = 0;
  filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsGetUserAvatarResultMessage::~FriendsGetUserAvatarResultMessage() {
  SharedDtor();
}

void FriendsGetUserAvatarResultMessage::SharedDtor() {
  if (filedata_ != &::google::protobuf::internal::kEmptyString) {
    delete filedata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsGetUserAvatarResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsGetUserAvatarResultMessage& FriendsGetUserAvatarResultMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_friends_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
#endif
  return *default_instance_;
}

FriendsGetUserAvatarResultMessage* FriendsGetUserAvatarResultMessage::default_instance_ = NULL;

FriendsGetUserAvatarResultMessage* FriendsGetUserAvatarResultMessage::New() const {
  return new FriendsGetUserAvatarResultMessage;
}

void FriendsGetUserAvatarResultMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    guid_ = 0;
    if (has_filedata()) {
      if (filedata_ != &::google::protobuf::internal::kEmptyString) {
        filedata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendsGetUserAvatarResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // required int32 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fileData;
        break;
      }

      // required bytes fileData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsGetUserAvatarResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guid(), output);
  }

  // required bytes fileData = 3;
  if (has_filedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->filedata(), output);
  }

}

int FriendsGetUserAvatarResultMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // required bytes fileData = 3;
    if (has_filedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filedata());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsGetUserAvatarResultMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsGetUserAvatarResultMessage*>(&from));
}

void FriendsGetUserAvatarResultMessage::MergeFrom(const FriendsGetUserAvatarResultMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_filedata()) {
      set_filedata(from.filedata());
    }
  }
}

void FriendsGetUserAvatarResultMessage::CopyFrom(const FriendsGetUserAvatarResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsGetUserAvatarResultMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FriendsGetUserAvatarResultMessage::Swap(FriendsGetUserAvatarResultMessage* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guid_, other->guid_);
    std::swap(filedata_, other->filedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsGetUserAvatarResultMessage::GetTypeName() const {
  return "FriendsGetUserAvatarResultMessage";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
