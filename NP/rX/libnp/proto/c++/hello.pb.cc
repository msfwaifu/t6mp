// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hello.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hello.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_hello_2eproto() {
  delete HelloMessage::default_instance_;
  delete CloseAppMessage::default_instance_;
  delete MessagingSendDataMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_hello_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_hello_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  HelloMessage::default_instance_ = new HelloMessage();
  CloseAppMessage::default_instance_ = new CloseAppMessage();
  MessagingSendDataMessage::default_instance_ = new MessagingSendDataMessage();
  HelloMessage::default_instance_->InitAsDefaultInstance();
  CloseAppMessage::default_instance_->InitAsDefaultInstance();
  MessagingSendDataMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hello_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hello_2eproto_once_);
void protobuf_AddDesc_hello_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hello_2eproto_once_,
                 &protobuf_AddDesc_hello_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hello_2eproto {
  StaticDescriptorInitializer_hello_2eproto() {
    protobuf_AddDesc_hello_2eproto();
  }
} static_descriptor_initializer_hello_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int HelloMessage::kNumberFieldNumber;
const int HelloMessage::kNumber2FieldNumber;
const int HelloMessage::kNameFieldNumber;
const int HelloMessage::kStuffFieldNumber;
#endif  // !_MSC_VER

HelloMessage::HelloMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void HelloMessage::InitAsDefaultInstance() {
}

HelloMessage::HelloMessage(const HelloMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void HelloMessage::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  number2_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stuff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloMessage::~HelloMessage() {
  SharedDtor();
}

void HelloMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (stuff_ != &::google::protobuf::internal::kEmptyString) {
    delete stuff_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HelloMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HelloMessage& HelloMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_hello_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_hello_2eproto();
#endif
  return *default_instance_;
}

HelloMessage* HelloMessage::default_instance_ = NULL;

HelloMessage* HelloMessage::New() const {
  return new HelloMessage;
}

void HelloMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    number2_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_stuff()) {
      if (stuff_ != &::google::protobuf::internal::kEmptyString) {
        stuff_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool HelloMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number2;
        break;
      }

      // required int32 number2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number2_)));
          set_has_number2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stuff;
        break;
      }

      // required string stuff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stuff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelloMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // required int32 number2 = 2;
  if (has_number2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number2(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string stuff = 4;
  if (has_stuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stuff(), output);
  }

}

int HelloMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // required int32 number2 = 2;
    if (has_number2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number2());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string stuff = 4;
    if (has_stuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stuff());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HelloMessage*>(&from));
}

void HelloMessage::MergeFrom(const HelloMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_number2()) {
      set_number2(from.number2());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_stuff()) {
      set_stuff(from.stuff());
    }
  }
}

void HelloMessage::CopyFrom(const HelloMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void HelloMessage::Swap(HelloMessage* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(number2_, other->number2_);
    std::swap(name_, other->name_);
    std::swap(stuff_, other->stuff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HelloMessage::GetTypeName() const {
  return "HelloMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int CloseAppMessage::kReasonFieldNumber;
#endif  // !_MSC_VER

CloseAppMessage::CloseAppMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CloseAppMessage::InitAsDefaultInstance() {
}

CloseAppMessage::CloseAppMessage(const CloseAppMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CloseAppMessage::SharedCtor() {
  _cached_size_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseAppMessage::~CloseAppMessage() {
  SharedDtor();
}

void CloseAppMessage::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CloseAppMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CloseAppMessage& CloseAppMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_hello_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_hello_2eproto();
#endif
  return *default_instance_;
}

CloseAppMessage* CloseAppMessage::default_instance_ = NULL;

CloseAppMessage* CloseAppMessage::New() const {
  return new CloseAppMessage;
}

void CloseAppMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CloseAppMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseAppMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->reason(), output);
  }

}

int CloseAppMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseAppMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CloseAppMessage*>(&from));
}

void CloseAppMessage::MergeFrom(const CloseAppMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
}

void CloseAppMessage::CopyFrom(const CloseAppMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseAppMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CloseAppMessage::Swap(CloseAppMessage* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CloseAppMessage::GetTypeName() const {
  return "CloseAppMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int MessagingSendDataMessage::kNpidFieldNumber;
const int MessagingSendDataMessage::kDataFieldNumber;
#endif  // !_MSC_VER

MessagingSendDataMessage::MessagingSendDataMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MessagingSendDataMessage::InitAsDefaultInstance() {
}

MessagingSendDataMessage::MessagingSendDataMessage(const MessagingSendDataMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MessagingSendDataMessage::SharedCtor() {
  _cached_size_ = 0;
  npid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessagingSendDataMessage::~MessagingSendDataMessage() {
  SharedDtor();
}

void MessagingSendDataMessage::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MessagingSendDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MessagingSendDataMessage& MessagingSendDataMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_hello_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_hello_2eproto();
#endif
  return *default_instance_;
}

MessagingSendDataMessage* MessagingSendDataMessage::default_instance_ = NULL;

MessagingSendDataMessage* MessagingSendDataMessage::New() const {
  return new MessagingSendDataMessage;
}

void MessagingSendDataMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MessagingSendDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 npid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessagingSendDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 npid = 1;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->npid(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

}

int MessagingSendDataMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 npid = 1;
    if (has_npid()) {
      total_size += 1 + 8;
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagingSendDataMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessagingSendDataMessage*>(&from));
}

void MessagingSendDataMessage::MergeFrom(const MessagingSendDataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npid()) {
      set_npid(from.npid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void MessagingSendDataMessage::CopyFrom(const MessagingSendDataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagingSendDataMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MessagingSendDataMessage::Swap(MessagingSendDataMessage* other) {
  if (other != this) {
    std::swap(npid_, other->npid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MessagingSendDataMessage::GetTypeName() const {
  return "MessagingSendDataMessage";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
