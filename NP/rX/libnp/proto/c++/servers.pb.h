// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servers.proto

#ifndef PROTOBUF_servers_2eproto__INCLUDED
#define PROTOBUF_servers_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_servers_2eproto();
void protobuf_AssignDesc_servers_2eproto();
void protobuf_ShutdownFile_servers_2eproto();

class SessionData;
class SessionInfo;
class ServersCreateSessionMessage;
class ServersCreateSessionResultMessage;
class ServersGetSessionsMessage;
class ServersGetSessionsResultMessage;
class ServersUpdateSessionMessage;
class ServersUpdateSessionResultMessage;
class ServersDeleteSessionMessage;
class ServersDeleteSessionResultMessage;

// ===================================================================

class SessionData : public ::google::protobuf::MessageLite {
 public:
  SessionData();
  virtual ~SessionData();

  SessionData(const SessionData& from);

  inline SessionData& operator=(const SessionData& from) {
    CopyFrom(from);
    return *this;
  }

  static const SessionData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SessionData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SessionData* other);

  // implements Message ----------------------------------------------

  SessionData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SessionData& from);
  void MergeFrom(const SessionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:SessionData)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_servers_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_servers_2eproto();
  #endif
  friend void protobuf_AssignDesc_servers_2eproto();
  friend void protobuf_ShutdownFile_servers_2eproto();

  void InitAsDefaultInstance();
  static SessionData* default_instance_;
};
// -------------------------------------------------------------------

class SessionInfo : public ::google::protobuf::MessageLite {
 public:
  SessionInfo();
  virtual ~SessionInfo();

  SessionInfo(const SessionInfo& from);

  inline SessionInfo& operator=(const SessionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SessionInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SessionInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SessionInfo* other);

  // implements Message ----------------------------------------------

  SessionInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SessionInfo& from);
  void MergeFrom(const SessionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline ::google::protobuf::uint32 address() const;
  inline void set_address(::google::protobuf::uint32 value);

  // optional int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional fixed64 npid = 3;
  inline bool has_npid() const;
  inline void clear_npid();
  static const int kNpidFieldNumber = 3;
  inline ::google::protobuf::uint64 npid() const;
  inline void set_npid(::google::protobuf::uint64 value);

  // optional int32 players = 4;
  inline bool has_players() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 4;
  inline ::google::protobuf::int32 players() const;
  inline void set_players(::google::protobuf::int32 value);

  // optional int32 maxplayers = 5;
  inline bool has_maxplayers() const;
  inline void clear_maxplayers();
  static const int kMaxplayersFieldNumber = 5;
  inline ::google::protobuf::int32 maxplayers() const;
  inline void set_maxplayers(::google::protobuf::int32 value);

  // repeated .SessionData data = 6;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::SessionData& data(int index) const;
  inline ::SessionData* mutable_data(int index);
  inline ::SessionData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SessionData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SessionData >*
      mutable_data();

  // optional uint64 sid = 7;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 7;
  inline ::google::protobuf::uint64 sid() const;
  inline void set_sid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SessionInfo)
 private:
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_npid();
  inline void clear_has_npid();
  inline void set_has_players();
  inline void clear_has_players();
  inline void set_has_maxplayers();
  inline void clear_has_maxplayers();
  inline void set_has_sid();
  inline void clear_has_sid();

  ::google::protobuf::uint32 address_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::uint64 npid_;
  ::google::protobuf::int32 players_;
  ::google::protobuf::int32 maxplayers_;
  ::google::protobuf::RepeatedPtrField< ::SessionData > data_;
  ::google::protobuf::uint64 sid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_servers_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_servers_2eproto();
  #endif
  friend void protobuf_AssignDesc_servers_2eproto();
  friend void protobuf_ShutdownFile_servers_2eproto();

  void InitAsDefaultInstance();
  static SessionInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServersCreateSessionMessage : public ::google::protobuf::MessageLite {
 public:
  ServersCreateSessionMessage();
  virtual ~ServersCreateSessionMessage();

  ServersCreateSessionMessage(const ServersCreateSessionMessage& from);

  inline ServersCreateSessionMessage& operator=(const ServersCreateSessionMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServersCreateSessionMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServersCreateSessionMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServersCreateSessionMessage* other);

  // implements Message ----------------------------------------------

  ServersCreateSessionMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServersCreateSessionMessage& from);
  void MergeFrom(const ServersCreateSessionMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SessionInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::SessionInfo& info() const;
  inline ::SessionInfo* mutable_info();
  inline ::SessionInfo* release_info();
  inline void set_allocated_info(::SessionInfo* info);

  // @@protoc_insertion_point(class_scope:ServersCreateSessionMessage)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::SessionInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_servers_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_servers_2eproto();
  #endif
  friend void protobuf_AssignDesc_servers_2eproto();
  friend void protobuf_ShutdownFile_servers_2eproto();

  void InitAsDefaultInstance();
  static ServersCreateSessionMessage* default_instance_;
};
// -------------------------------------------------------------------

class ServersCreateSessionResultMessage : public ::google::protobuf::MessageLite {
 public:
  ServersCreateSessionResultMessage();
  virtual ~ServersCreateSessionResultMessage();

  ServersCreateSessionResultMessage(const ServersCreateSessionResultMessage& from);

  inline ServersCreateSessionResultMessage& operator=(const ServersCreateSessionResultMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServersCreateSessionResultMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServersCreateSessionResultMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServersCreateSessionResultMessage* other);

  // implements Message ----------------------------------------------

  ServersCreateSessionResultMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServersCreateSessionResultMessage& from);
  void MergeFrom(const ServersCreateSessionResultMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional fixed64 sessionid = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  inline ::google::protobuf::uint64 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServersCreateSessionResultMessage)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::uint64 sessionid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_servers_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_servers_2eproto();
  #endif
  friend void protobuf_AssignDesc_servers_2eproto();
  friend void protobuf_ShutdownFile_servers_2eproto();

  void InitAsDefaultInstance();
  static ServersCreateSessionResultMessage* default_instance_;
};
// -------------------------------------------------------------------

class ServersGetSessionsMessage : public ::google::protobuf::MessageLite {
 public:
  ServersGetSessionsMessage();
  virtual ~ServersGetSessionsMessage();

  ServersGetSessionsMessage(const ServersGetSessionsMessage& from);

  inline ServersGetSessionsMessage& operator=(const ServersGetSessionsMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServersGetSessionsMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServersGetSessionsMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServersGetSessionsMessage* other);

  // implements Message ----------------------------------------------

  ServersGetSessionsMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServersGetSessionsMessage& from);
  void MergeFrom(const ServersGetSessionsMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SessionData infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::SessionData& infos(int index) const;
  inline ::SessionData* mutable_infos(int index);
  inline ::SessionData* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SessionData >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SessionData >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:ServersGetSessionsMessage)
 private:

  ::google::protobuf::RepeatedPtrField< ::SessionData > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_servers_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_servers_2eproto();
  #endif
  friend void protobuf_AssignDesc_servers_2eproto();
  friend void protobuf_ShutdownFile_servers_2eproto();

  void InitAsDefaultInstance();
  static ServersGetSessionsMessage* default_instance_;
};
// -------------------------------------------------------------------

class ServersGetSessionsResultMessage : public ::google::protobuf::MessageLite {
 public:
  ServersGetSessionsResultMessage();
  virtual ~ServersGetSessionsResultMessage();

  ServersGetSessionsResultMessage(const ServersGetSessionsResultMessage& from);

  inline ServersGetSessionsResultMessage& operator=(const ServersGetSessionsResultMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServersGetSessionsResultMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServersGetSessionsResultMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServersGetSessionsResultMessage* other);

  // implements Message ----------------------------------------------

  ServersGetSessionsResultMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServersGetSessionsResultMessage& from);
  void MergeFrom(const ServersGetSessionsResultMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SessionInfo servers = 1;
  inline int servers_size() const;
  inline void clear_servers();
  static const int kServersFieldNumber = 1;
  inline const ::SessionInfo& servers(int index) const;
  inline ::SessionInfo* mutable_servers(int index);
  inline ::SessionInfo* add_servers();
  inline const ::google::protobuf::RepeatedPtrField< ::SessionInfo >&
      servers() const;
  inline ::google::protobuf::RepeatedPtrField< ::SessionInfo >*
      mutable_servers();

  // @@protoc_insertion_point(class_scope:ServersGetSessionsResultMessage)
 private:

  ::google::protobuf::RepeatedPtrField< ::SessionInfo > servers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_servers_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_servers_2eproto();
  #endif
  friend void protobuf_AssignDesc_servers_2eproto();
  friend void protobuf_ShutdownFile_servers_2eproto();

  void InitAsDefaultInstance();
  static ServersGetSessionsResultMessage* default_instance_;
};
// -------------------------------------------------------------------

class ServersUpdateSessionMessage : public ::google::protobuf::MessageLite {
 public:
  ServersUpdateSessionMessage();
  virtual ~ServersUpdateSessionMessage();

  ServersUpdateSessionMessage(const ServersUpdateSessionMessage& from);

  inline ServersUpdateSessionMessage& operator=(const ServersUpdateSessionMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServersUpdateSessionMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServersUpdateSessionMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServersUpdateSessionMessage* other);

  // implements Message ----------------------------------------------

  ServersUpdateSessionMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServersUpdateSessionMessage& from);
  void MergeFrom(const ServersUpdateSessionMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 sessionid = 1;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  inline ::google::protobuf::uint64 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint64 value);

  // optional .SessionInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::SessionInfo& info() const;
  inline ::SessionInfo* mutable_info();
  inline ::SessionInfo* release_info();
  inline void set_allocated_info(::SessionInfo* info);

  // @@protoc_insertion_point(class_scope:ServersUpdateSessionMessage)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::uint64 sessionid_;
  ::SessionInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_servers_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_servers_2eproto();
  #endif
  friend void protobuf_AssignDesc_servers_2eproto();
  friend void protobuf_ShutdownFile_servers_2eproto();

  void InitAsDefaultInstance();
  static ServersUpdateSessionMessage* default_instance_;
};
// -------------------------------------------------------------------

class ServersUpdateSessionResultMessage : public ::google::protobuf::MessageLite {
 public:
  ServersUpdateSessionResultMessage();
  virtual ~ServersUpdateSessionResultMessage();

  ServersUpdateSessionResultMessage(const ServersUpdateSessionResultMessage& from);

  inline ServersUpdateSessionResultMessage& operator=(const ServersUpdateSessionResultMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServersUpdateSessionResultMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServersUpdateSessionResultMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServersUpdateSessionResultMessage* other);

  // implements Message ----------------------------------------------

  ServersUpdateSessionResultMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServersUpdateSessionResultMessage& from);
  void MergeFrom(const ServersUpdateSessionResultMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServersUpdateSessionResultMessage)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_servers_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_servers_2eproto();
  #endif
  friend void protobuf_AssignDesc_servers_2eproto();
  friend void protobuf_ShutdownFile_servers_2eproto();

  void InitAsDefaultInstance();
  static ServersUpdateSessionResultMessage* default_instance_;
};
// -------------------------------------------------------------------

class ServersDeleteSessionMessage : public ::google::protobuf::MessageLite {
 public:
  ServersDeleteSessionMessage();
  virtual ~ServersDeleteSessionMessage();

  ServersDeleteSessionMessage(const ServersDeleteSessionMessage& from);

  inline ServersDeleteSessionMessage& operator=(const ServersDeleteSessionMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServersDeleteSessionMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServersDeleteSessionMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServersDeleteSessionMessage* other);

  // implements Message ----------------------------------------------

  ServersDeleteSessionMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServersDeleteSessionMessage& from);
  void MergeFrom(const ServersDeleteSessionMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 sessionid = 1;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  inline ::google::protobuf::uint64 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServersDeleteSessionMessage)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::uint64 sessionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_servers_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_servers_2eproto();
  #endif
  friend void protobuf_AssignDesc_servers_2eproto();
  friend void protobuf_ShutdownFile_servers_2eproto();

  void InitAsDefaultInstance();
  static ServersDeleteSessionMessage* default_instance_;
};
// -------------------------------------------------------------------

class ServersDeleteSessionResultMessage : public ::google::protobuf::MessageLite {
 public:
  ServersDeleteSessionResultMessage();
  virtual ~ServersDeleteSessionResultMessage();

  ServersDeleteSessionResultMessage(const ServersDeleteSessionResultMessage& from);

  inline ServersDeleteSessionResultMessage& operator=(const ServersDeleteSessionResultMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServersDeleteSessionResultMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServersDeleteSessionResultMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServersDeleteSessionResultMessage* other);

  // implements Message ----------------------------------------------

  ServersDeleteSessionResultMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServersDeleteSessionResultMessage& from);
  void MergeFrom(const ServersDeleteSessionResultMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServersDeleteSessionResultMessage)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_servers_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_servers_2eproto();
  #endif
  friend void protobuf_AssignDesc_servers_2eproto();
  friend void protobuf_ShutdownFile_servers_2eproto();

  void InitAsDefaultInstance();
  static ServersDeleteSessionResultMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// SessionData

// required string key = 1;
inline bool SessionData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionData::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SessionData::key() const {
  return *key_;
}
inline void SessionData::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SessionData::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SessionData::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SessionData::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SessionData::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SessionData::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string value = 2;
inline bool SessionData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionData::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionData::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionData::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SessionData::value() const {
  return *value_;
}
inline void SessionData::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SessionData::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SessionData::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SessionData::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SessionData::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SessionData::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SessionInfo

// optional uint32 address = 1;
inline bool SessionInfo::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionInfo::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionInfo::clear_address() {
  address_ = 0u;
  clear_has_address();
}
inline ::google::protobuf::uint32 SessionInfo::address() const {
  return address_;
}
inline void SessionInfo::set_address(::google::protobuf::uint32 value) {
  set_has_address();
  address_ = value;
}

// optional int32 port = 2;
inline bool SessionInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 SessionInfo::port() const {
  return port_;
}
inline void SessionInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional fixed64 npid = 3;
inline bool SessionInfo::has_npid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionInfo::set_has_npid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionInfo::clear_has_npid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionInfo::clear_npid() {
  npid_ = GOOGLE_ULONGLONG(0);
  clear_has_npid();
}
inline ::google::protobuf::uint64 SessionInfo::npid() const {
  return npid_;
}
inline void SessionInfo::set_npid(::google::protobuf::uint64 value) {
  set_has_npid();
  npid_ = value;
}

// optional int32 players = 4;
inline bool SessionInfo::has_players() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionInfo::set_has_players() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionInfo::clear_has_players() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionInfo::clear_players() {
  players_ = 0;
  clear_has_players();
}
inline ::google::protobuf::int32 SessionInfo::players() const {
  return players_;
}
inline void SessionInfo::set_players(::google::protobuf::int32 value) {
  set_has_players();
  players_ = value;
}

// optional int32 maxplayers = 5;
inline bool SessionInfo::has_maxplayers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionInfo::set_has_maxplayers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SessionInfo::clear_has_maxplayers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SessionInfo::clear_maxplayers() {
  maxplayers_ = 0;
  clear_has_maxplayers();
}
inline ::google::protobuf::int32 SessionInfo::maxplayers() const {
  return maxplayers_;
}
inline void SessionInfo::set_maxplayers(::google::protobuf::int32 value) {
  set_has_maxplayers();
  maxplayers_ = value;
}

// repeated .SessionData data = 6;
inline int SessionInfo::data_size() const {
  return data_.size();
}
inline void SessionInfo::clear_data() {
  data_.Clear();
}
inline const ::SessionData& SessionInfo::data(int index) const {
  return data_.Get(index);
}
inline ::SessionData* SessionInfo::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SessionData* SessionInfo::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SessionData >&
SessionInfo::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SessionData >*
SessionInfo::mutable_data() {
  return &data_;
}

// optional uint64 sid = 7;
inline bool SessionInfo::has_sid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SessionInfo::set_has_sid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SessionInfo::clear_has_sid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SessionInfo::clear_sid() {
  sid_ = GOOGLE_ULONGLONG(0);
  clear_has_sid();
}
inline ::google::protobuf::uint64 SessionInfo::sid() const {
  return sid_;
}
inline void SessionInfo::set_sid(::google::protobuf::uint64 value) {
  set_has_sid();
  sid_ = value;
}

// -------------------------------------------------------------------

// ServersCreateSessionMessage

// optional .SessionInfo info = 1;
inline bool ServersCreateSessionMessage::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServersCreateSessionMessage::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServersCreateSessionMessage::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServersCreateSessionMessage::clear_info() {
  if (info_ != NULL) info_->::SessionInfo::Clear();
  clear_has_info();
}
inline const ::SessionInfo& ServersCreateSessionMessage::info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::SessionInfo* ServersCreateSessionMessage::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SessionInfo;
  return info_;
}
inline ::SessionInfo* ServersCreateSessionMessage::release_info() {
  clear_has_info();
  ::SessionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ServersCreateSessionMessage::set_allocated_info(::SessionInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// ServersCreateSessionResultMessage

// optional int32 result = 1;
inline bool ServersCreateSessionResultMessage::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServersCreateSessionResultMessage::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServersCreateSessionResultMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServersCreateSessionResultMessage::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ServersCreateSessionResultMessage::result() const {
  return result_;
}
inline void ServersCreateSessionResultMessage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional fixed64 sessionid = 2;
inline bool ServersCreateSessionResultMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServersCreateSessionResultMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServersCreateSessionResultMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServersCreateSessionResultMessage::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 ServersCreateSessionResultMessage::sessionid() const {
  return sessionid_;
}
inline void ServersCreateSessionResultMessage::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
}

// -------------------------------------------------------------------

// ServersGetSessionsMessage

// repeated .SessionData infos = 1;
inline int ServersGetSessionsMessage::infos_size() const {
  return infos_.size();
}
inline void ServersGetSessionsMessage::clear_infos() {
  infos_.Clear();
}
inline const ::SessionData& ServersGetSessionsMessage::infos(int index) const {
  return infos_.Get(index);
}
inline ::SessionData* ServersGetSessionsMessage::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::SessionData* ServersGetSessionsMessage::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SessionData >&
ServersGetSessionsMessage::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SessionData >*
ServersGetSessionsMessage::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// ServersGetSessionsResultMessage

// repeated .SessionInfo servers = 1;
inline int ServersGetSessionsResultMessage::servers_size() const {
  return servers_.size();
}
inline void ServersGetSessionsResultMessage::clear_servers() {
  servers_.Clear();
}
inline const ::SessionInfo& ServersGetSessionsResultMessage::servers(int index) const {
  return servers_.Get(index);
}
inline ::SessionInfo* ServersGetSessionsResultMessage::mutable_servers(int index) {
  return servers_.Mutable(index);
}
inline ::SessionInfo* ServersGetSessionsResultMessage::add_servers() {
  return servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SessionInfo >&
ServersGetSessionsResultMessage::servers() const {
  return servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::SessionInfo >*
ServersGetSessionsResultMessage::mutable_servers() {
  return &servers_;
}

// -------------------------------------------------------------------

// ServersUpdateSessionMessage

// optional fixed64 sessionid = 1;
inline bool ServersUpdateSessionMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServersUpdateSessionMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServersUpdateSessionMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServersUpdateSessionMessage::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 ServersUpdateSessionMessage::sessionid() const {
  return sessionid_;
}
inline void ServersUpdateSessionMessage::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
}

// optional .SessionInfo info = 2;
inline bool ServersUpdateSessionMessage::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServersUpdateSessionMessage::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServersUpdateSessionMessage::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServersUpdateSessionMessage::clear_info() {
  if (info_ != NULL) info_->::SessionInfo::Clear();
  clear_has_info();
}
inline const ::SessionInfo& ServersUpdateSessionMessage::info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::SessionInfo* ServersUpdateSessionMessage::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SessionInfo;
  return info_;
}
inline ::SessionInfo* ServersUpdateSessionMessage::release_info() {
  clear_has_info();
  ::SessionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ServersUpdateSessionMessage::set_allocated_info(::SessionInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// ServersUpdateSessionResultMessage

// optional int32 result = 1;
inline bool ServersUpdateSessionResultMessage::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServersUpdateSessionResultMessage::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServersUpdateSessionResultMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServersUpdateSessionResultMessage::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ServersUpdateSessionResultMessage::result() const {
  return result_;
}
inline void ServersUpdateSessionResultMessage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ServersDeleteSessionMessage

// optional fixed64 sessionid = 1;
inline bool ServersDeleteSessionMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServersDeleteSessionMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServersDeleteSessionMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServersDeleteSessionMessage::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 ServersDeleteSessionMessage::sessionid() const {
  return sessionid_;
}
inline void ServersDeleteSessionMessage::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
}

// -------------------------------------------------------------------

// ServersDeleteSessionResultMessage

// optional int32 result = 1;
inline bool ServersDeleteSessionResultMessage::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServersDeleteSessionResultMessage::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServersDeleteSessionResultMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServersDeleteSessionResultMessage::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ServersDeleteSessionResultMessage::result() const {
  return result_;
}
inline void ServersDeleteSessionResultMessage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_servers_2eproto__INCLUDED
