// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#ifndef PROTOBUF_storage_2eproto__INCLUDED
#define PROTOBUF_storage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_storage_2eproto();
void protobuf_AssignDesc_storage_2eproto();
void protobuf_ShutdownFile_storage_2eproto();

class StorageGetPublisherFileMessage;
class StoragePublisherFileMessage;
class StorageGetUserFileMessage;
class StorageUserFileMessage;
class StorageWriteUserFileMessage;
class StorageWriteUserFileResultMessage;
class StorageSendRandomStringMessage;

// ===================================================================

class StorageGetPublisherFileMessage : public ::google::protobuf::MessageLite {
 public:
  StorageGetPublisherFileMessage();
  virtual ~StorageGetPublisherFileMessage();

  StorageGetPublisherFileMessage(const StorageGetPublisherFileMessage& from);

  inline StorageGetPublisherFileMessage& operator=(const StorageGetPublisherFileMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const StorageGetPublisherFileMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StorageGetPublisherFileMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StorageGetPublisherFileMessage* other);

  // implements Message ----------------------------------------------

  StorageGetPublisherFileMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StorageGetPublisherFileMessage& from);
  void MergeFrom(const StorageGetPublisherFileMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fileName = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:StorageGetPublisherFileMessage)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();

  ::std::string* filename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_storage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_storage_2eproto();
  #endif
  friend void protobuf_AssignDesc_storage_2eproto();
  friend void protobuf_ShutdownFile_storage_2eproto();

  void InitAsDefaultInstance();
  static StorageGetPublisherFileMessage* default_instance_;
};
// -------------------------------------------------------------------

class StoragePublisherFileMessage : public ::google::protobuf::MessageLite {
 public:
  StoragePublisherFileMessage();
  virtual ~StoragePublisherFileMessage();

  StoragePublisherFileMessage(const StoragePublisherFileMessage& from);

  inline StoragePublisherFileMessage& operator=(const StoragePublisherFileMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const StoragePublisherFileMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StoragePublisherFileMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StoragePublisherFileMessage* other);

  // implements Message ----------------------------------------------

  StoragePublisherFileMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StoragePublisherFileMessage& from);
  void MergeFrom(const StoragePublisherFileMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required string fileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required bytes fileData = 3;
  inline bool has_filedata() const;
  inline void clear_filedata();
  static const int kFileDataFieldNumber = 3;
  inline const ::std::string& filedata() const;
  inline void set_filedata(const ::std::string& value);
  inline void set_filedata(const char* value);
  inline void set_filedata(const void* value, size_t size);
  inline ::std::string* mutable_filedata();
  inline ::std::string* release_filedata();
  inline void set_allocated_filedata(::std::string* filedata);

  // @@protoc_insertion_point(class_scope:StoragePublisherFileMessage)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_filedata();
  inline void clear_has_filedata();

  ::std::string* filename_;
  ::std::string* filedata_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_storage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_storage_2eproto();
  #endif
  friend void protobuf_AssignDesc_storage_2eproto();
  friend void protobuf_ShutdownFile_storage_2eproto();

  void InitAsDefaultInstance();
  static StoragePublisherFileMessage* default_instance_;
};
// -------------------------------------------------------------------

class StorageGetUserFileMessage : public ::google::protobuf::MessageLite {
 public:
  StorageGetUserFileMessage();
  virtual ~StorageGetUserFileMessage();

  StorageGetUserFileMessage(const StorageGetUserFileMessage& from);

  inline StorageGetUserFileMessage& operator=(const StorageGetUserFileMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const StorageGetUserFileMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StorageGetUserFileMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StorageGetUserFileMessage* other);

  // implements Message ----------------------------------------------

  StorageGetUserFileMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StorageGetUserFileMessage& from);
  void MergeFrom(const StorageGetUserFileMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fileName = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required fixed64 npid = 2;
  inline bool has_npid() const;
  inline void clear_npid();
  static const int kNpidFieldNumber = 2;
  inline ::google::protobuf::uint64 npid() const;
  inline void set_npid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:StorageGetUserFileMessage)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_npid();
  inline void clear_has_npid();

  ::std::string* filename_;
  ::google::protobuf::uint64 npid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_storage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_storage_2eproto();
  #endif
  friend void protobuf_AssignDesc_storage_2eproto();
  friend void protobuf_ShutdownFile_storage_2eproto();

  void InitAsDefaultInstance();
  static StorageGetUserFileMessage* default_instance_;
};
// -------------------------------------------------------------------

class StorageUserFileMessage : public ::google::protobuf::MessageLite {
 public:
  StorageUserFileMessage();
  virtual ~StorageUserFileMessage();

  StorageUserFileMessage(const StorageUserFileMessage& from);

  inline StorageUserFileMessage& operator=(const StorageUserFileMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const StorageUserFileMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StorageUserFileMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StorageUserFileMessage* other);

  // implements Message ----------------------------------------------

  StorageUserFileMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StorageUserFileMessage& from);
  void MergeFrom(const StorageUserFileMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required string fileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required fixed64 npid = 3;
  inline bool has_npid() const;
  inline void clear_npid();
  static const int kNpidFieldNumber = 3;
  inline ::google::protobuf::uint64 npid() const;
  inline void set_npid(::google::protobuf::uint64 value);

  // required bytes fileData = 4;
  inline bool has_filedata() const;
  inline void clear_filedata();
  static const int kFileDataFieldNumber = 4;
  inline const ::std::string& filedata() const;
  inline void set_filedata(const ::std::string& value);
  inline void set_filedata(const char* value);
  inline void set_filedata(const void* value, size_t size);
  inline ::std::string* mutable_filedata();
  inline ::std::string* release_filedata();
  inline void set_allocated_filedata(::std::string* filedata);

  // @@protoc_insertion_point(class_scope:StorageUserFileMessage)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_npid();
  inline void clear_has_npid();
  inline void set_has_filedata();
  inline void clear_has_filedata();

  ::std::string* filename_;
  ::google::protobuf::uint64 npid_;
  ::std::string* filedata_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_storage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_storage_2eproto();
  #endif
  friend void protobuf_AssignDesc_storage_2eproto();
  friend void protobuf_ShutdownFile_storage_2eproto();

  void InitAsDefaultInstance();
  static StorageUserFileMessage* default_instance_;
};
// -------------------------------------------------------------------

class StorageWriteUserFileMessage : public ::google::protobuf::MessageLite {
 public:
  StorageWriteUserFileMessage();
  virtual ~StorageWriteUserFileMessage();

  StorageWriteUserFileMessage(const StorageWriteUserFileMessage& from);

  inline StorageWriteUserFileMessage& operator=(const StorageWriteUserFileMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const StorageWriteUserFileMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StorageWriteUserFileMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StorageWriteUserFileMessage* other);

  // implements Message ----------------------------------------------

  StorageWriteUserFileMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StorageWriteUserFileMessage& from);
  void MergeFrom(const StorageWriteUserFileMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fileName = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required fixed64 npid = 2;
  inline bool has_npid() const;
  inline void clear_npid();
  static const int kNpidFieldNumber = 2;
  inline ::google::protobuf::uint64 npid() const;
  inline void set_npid(::google::protobuf::uint64 value);

  // required bytes fileData = 3;
  inline bool has_filedata() const;
  inline void clear_filedata();
  static const int kFileDataFieldNumber = 3;
  inline const ::std::string& filedata() const;
  inline void set_filedata(const ::std::string& value);
  inline void set_filedata(const char* value);
  inline void set_filedata(const void* value, size_t size);
  inline ::std::string* mutable_filedata();
  inline ::std::string* release_filedata();
  inline void set_allocated_filedata(::std::string* filedata);

  // @@protoc_insertion_point(class_scope:StorageWriteUserFileMessage)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_npid();
  inline void clear_has_npid();
  inline void set_has_filedata();
  inline void clear_has_filedata();

  ::std::string* filename_;
  ::google::protobuf::uint64 npid_;
  ::std::string* filedata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_storage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_storage_2eproto();
  #endif
  friend void protobuf_AssignDesc_storage_2eproto();
  friend void protobuf_ShutdownFile_storage_2eproto();

  void InitAsDefaultInstance();
  static StorageWriteUserFileMessage* default_instance_;
};
// -------------------------------------------------------------------

class StorageWriteUserFileResultMessage : public ::google::protobuf::MessageLite {
 public:
  StorageWriteUserFileResultMessage();
  virtual ~StorageWriteUserFileResultMessage();

  StorageWriteUserFileResultMessage(const StorageWriteUserFileResultMessage& from);

  inline StorageWriteUserFileResultMessage& operator=(const StorageWriteUserFileResultMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const StorageWriteUserFileResultMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StorageWriteUserFileResultMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StorageWriteUserFileResultMessage* other);

  // implements Message ----------------------------------------------

  StorageWriteUserFileResultMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StorageWriteUserFileResultMessage& from);
  void MergeFrom(const StorageWriteUserFileResultMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required string fileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required fixed64 npid = 3;
  inline bool has_npid() const;
  inline void clear_npid();
  static const int kNpidFieldNumber = 3;
  inline ::google::protobuf::uint64 npid() const;
  inline void set_npid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:StorageWriteUserFileResultMessage)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_npid();
  inline void clear_has_npid();

  ::std::string* filename_;
  ::google::protobuf::uint64 npid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_storage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_storage_2eproto();
  #endif
  friend void protobuf_AssignDesc_storage_2eproto();
  friend void protobuf_ShutdownFile_storage_2eproto();

  void InitAsDefaultInstance();
  static StorageWriteUserFileResultMessage* default_instance_;
};
// -------------------------------------------------------------------

class StorageSendRandomStringMessage : public ::google::protobuf::MessageLite {
 public:
  StorageSendRandomStringMessage();
  virtual ~StorageSendRandomStringMessage();

  StorageSendRandomStringMessage(const StorageSendRandomStringMessage& from);

  inline StorageSendRandomStringMessage& operator=(const StorageSendRandomStringMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const StorageSendRandomStringMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StorageSendRandomStringMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StorageSendRandomStringMessage* other);

  // implements Message ----------------------------------------------

  StorageSendRandomStringMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StorageSendRandomStringMessage& from);
  void MergeFrom(const StorageSendRandomStringMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string randomString = 1;
  inline bool has_randomstring() const;
  inline void clear_randomstring();
  static const int kRandomStringFieldNumber = 1;
  inline const ::std::string& randomstring() const;
  inline void set_randomstring(const ::std::string& value);
  inline void set_randomstring(const char* value);
  inline void set_randomstring(const char* value, size_t size);
  inline ::std::string* mutable_randomstring();
  inline ::std::string* release_randomstring();
  inline void set_allocated_randomstring(::std::string* randomstring);

  // @@protoc_insertion_point(class_scope:StorageSendRandomStringMessage)
 private:
  inline void set_has_randomstring();
  inline void clear_has_randomstring();

  ::std::string* randomstring_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_storage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_storage_2eproto();
  #endif
  friend void protobuf_AssignDesc_storage_2eproto();
  friend void protobuf_ShutdownFile_storage_2eproto();

  void InitAsDefaultInstance();
  static StorageSendRandomStringMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// StorageGetPublisherFileMessage

// required string fileName = 1;
inline bool StorageGetPublisherFileMessage::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageGetPublisherFileMessage::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageGetPublisherFileMessage::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageGetPublisherFileMessage::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& StorageGetPublisherFileMessage::filename() const {
  return *filename_;
}
inline void StorageGetPublisherFileMessage::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void StorageGetPublisherFileMessage::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void StorageGetPublisherFileMessage::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StorageGetPublisherFileMessage::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* StorageGetPublisherFileMessage::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StorageGetPublisherFileMessage::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StoragePublisherFileMessage

// required int32 result = 1;
inline bool StoragePublisherFileMessage::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoragePublisherFileMessage::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoragePublisherFileMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoragePublisherFileMessage::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 StoragePublisherFileMessage::result() const {
  return result_;
}
inline void StoragePublisherFileMessage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string fileName = 2;
inline bool StoragePublisherFileMessage::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoragePublisherFileMessage::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoragePublisherFileMessage::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoragePublisherFileMessage::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& StoragePublisherFileMessage::filename() const {
  return *filename_;
}
inline void StoragePublisherFileMessage::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void StoragePublisherFileMessage::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void StoragePublisherFileMessage::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoragePublisherFileMessage::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* StoragePublisherFileMessage::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StoragePublisherFileMessage::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes fileData = 3;
inline bool StoragePublisherFileMessage::has_filedata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoragePublisherFileMessage::set_has_filedata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoragePublisherFileMessage::clear_has_filedata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoragePublisherFileMessage::clear_filedata() {
  if (filedata_ != &::google::protobuf::internal::kEmptyString) {
    filedata_->clear();
  }
  clear_has_filedata();
}
inline const ::std::string& StoragePublisherFileMessage::filedata() const {
  return *filedata_;
}
inline void StoragePublisherFileMessage::set_filedata(const ::std::string& value) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(value);
}
inline void StoragePublisherFileMessage::set_filedata(const char* value) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(value);
}
inline void StoragePublisherFileMessage::set_filedata(const void* value, size_t size) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoragePublisherFileMessage::mutable_filedata() {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  return filedata_;
}
inline ::std::string* StoragePublisherFileMessage::release_filedata() {
  clear_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filedata_;
    filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StoragePublisherFileMessage::set_allocated_filedata(::std::string* filedata) {
  if (filedata_ != &::google::protobuf::internal::kEmptyString) {
    delete filedata_;
  }
  if (filedata) {
    set_has_filedata();
    filedata_ = filedata;
  } else {
    clear_has_filedata();
    filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StorageGetUserFileMessage

// required string fileName = 1;
inline bool StorageGetUserFileMessage::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageGetUserFileMessage::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageGetUserFileMessage::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageGetUserFileMessage::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& StorageGetUserFileMessage::filename() const {
  return *filename_;
}
inline void StorageGetUserFileMessage::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void StorageGetUserFileMessage::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void StorageGetUserFileMessage::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StorageGetUserFileMessage::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* StorageGetUserFileMessage::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StorageGetUserFileMessage::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed64 npid = 2;
inline bool StorageGetUserFileMessage::has_npid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageGetUserFileMessage::set_has_npid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageGetUserFileMessage::clear_has_npid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageGetUserFileMessage::clear_npid() {
  npid_ = GOOGLE_ULONGLONG(0);
  clear_has_npid();
}
inline ::google::protobuf::uint64 StorageGetUserFileMessage::npid() const {
  return npid_;
}
inline void StorageGetUserFileMessage::set_npid(::google::protobuf::uint64 value) {
  set_has_npid();
  npid_ = value;
}

// -------------------------------------------------------------------

// StorageUserFileMessage

// required int32 result = 1;
inline bool StorageUserFileMessage::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageUserFileMessage::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageUserFileMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageUserFileMessage::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 StorageUserFileMessage::result() const {
  return result_;
}
inline void StorageUserFileMessage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string fileName = 2;
inline bool StorageUserFileMessage::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageUserFileMessage::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageUserFileMessage::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageUserFileMessage::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& StorageUserFileMessage::filename() const {
  return *filename_;
}
inline void StorageUserFileMessage::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void StorageUserFileMessage::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void StorageUserFileMessage::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StorageUserFileMessage::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* StorageUserFileMessage::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StorageUserFileMessage::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed64 npid = 3;
inline bool StorageUserFileMessage::has_npid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StorageUserFileMessage::set_has_npid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StorageUserFileMessage::clear_has_npid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StorageUserFileMessage::clear_npid() {
  npid_ = GOOGLE_ULONGLONG(0);
  clear_has_npid();
}
inline ::google::protobuf::uint64 StorageUserFileMessage::npid() const {
  return npid_;
}
inline void StorageUserFileMessage::set_npid(::google::protobuf::uint64 value) {
  set_has_npid();
  npid_ = value;
}

// required bytes fileData = 4;
inline bool StorageUserFileMessage::has_filedata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StorageUserFileMessage::set_has_filedata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StorageUserFileMessage::clear_has_filedata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StorageUserFileMessage::clear_filedata() {
  if (filedata_ != &::google::protobuf::internal::kEmptyString) {
    filedata_->clear();
  }
  clear_has_filedata();
}
inline const ::std::string& StorageUserFileMessage::filedata() const {
  return *filedata_;
}
inline void StorageUserFileMessage::set_filedata(const ::std::string& value) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(value);
}
inline void StorageUserFileMessage::set_filedata(const char* value) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(value);
}
inline void StorageUserFileMessage::set_filedata(const void* value, size_t size) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StorageUserFileMessage::mutable_filedata() {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  return filedata_;
}
inline ::std::string* StorageUserFileMessage::release_filedata() {
  clear_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filedata_;
    filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StorageUserFileMessage::set_allocated_filedata(::std::string* filedata) {
  if (filedata_ != &::google::protobuf::internal::kEmptyString) {
    delete filedata_;
  }
  if (filedata) {
    set_has_filedata();
    filedata_ = filedata;
  } else {
    clear_has_filedata();
    filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StorageWriteUserFileMessage

// required string fileName = 1;
inline bool StorageWriteUserFileMessage::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageWriteUserFileMessage::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageWriteUserFileMessage::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageWriteUserFileMessage::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& StorageWriteUserFileMessage::filename() const {
  return *filename_;
}
inline void StorageWriteUserFileMessage::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void StorageWriteUserFileMessage::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void StorageWriteUserFileMessage::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StorageWriteUserFileMessage::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* StorageWriteUserFileMessage::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StorageWriteUserFileMessage::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed64 npid = 2;
inline bool StorageWriteUserFileMessage::has_npid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageWriteUserFileMessage::set_has_npid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageWriteUserFileMessage::clear_has_npid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageWriteUserFileMessage::clear_npid() {
  npid_ = GOOGLE_ULONGLONG(0);
  clear_has_npid();
}
inline ::google::protobuf::uint64 StorageWriteUserFileMessage::npid() const {
  return npid_;
}
inline void StorageWriteUserFileMessage::set_npid(::google::protobuf::uint64 value) {
  set_has_npid();
  npid_ = value;
}

// required bytes fileData = 3;
inline bool StorageWriteUserFileMessage::has_filedata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StorageWriteUserFileMessage::set_has_filedata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StorageWriteUserFileMessage::clear_has_filedata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StorageWriteUserFileMessage::clear_filedata() {
  if (filedata_ != &::google::protobuf::internal::kEmptyString) {
    filedata_->clear();
  }
  clear_has_filedata();
}
inline const ::std::string& StorageWriteUserFileMessage::filedata() const {
  return *filedata_;
}
inline void StorageWriteUserFileMessage::set_filedata(const ::std::string& value) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(value);
}
inline void StorageWriteUserFileMessage::set_filedata(const char* value) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(value);
}
inline void StorageWriteUserFileMessage::set_filedata(const void* value, size_t size) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StorageWriteUserFileMessage::mutable_filedata() {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  return filedata_;
}
inline ::std::string* StorageWriteUserFileMessage::release_filedata() {
  clear_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filedata_;
    filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StorageWriteUserFileMessage::set_allocated_filedata(::std::string* filedata) {
  if (filedata_ != &::google::protobuf::internal::kEmptyString) {
    delete filedata_;
  }
  if (filedata) {
    set_has_filedata();
    filedata_ = filedata;
  } else {
    clear_has_filedata();
    filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StorageWriteUserFileResultMessage

// required int32 result = 1;
inline bool StorageWriteUserFileResultMessage::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageWriteUserFileResultMessage::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageWriteUserFileResultMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageWriteUserFileResultMessage::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 StorageWriteUserFileResultMessage::result() const {
  return result_;
}
inline void StorageWriteUserFileResultMessage::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string fileName = 2;
inline bool StorageWriteUserFileResultMessage::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageWriteUserFileResultMessage::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageWriteUserFileResultMessage::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageWriteUserFileResultMessage::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& StorageWriteUserFileResultMessage::filename() const {
  return *filename_;
}
inline void StorageWriteUserFileResultMessage::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void StorageWriteUserFileResultMessage::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void StorageWriteUserFileResultMessage::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StorageWriteUserFileResultMessage::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* StorageWriteUserFileResultMessage::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StorageWriteUserFileResultMessage::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed64 npid = 3;
inline bool StorageWriteUserFileResultMessage::has_npid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StorageWriteUserFileResultMessage::set_has_npid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StorageWriteUserFileResultMessage::clear_has_npid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StorageWriteUserFileResultMessage::clear_npid() {
  npid_ = GOOGLE_ULONGLONG(0);
  clear_has_npid();
}
inline ::google::protobuf::uint64 StorageWriteUserFileResultMessage::npid() const {
  return npid_;
}
inline void StorageWriteUserFileResultMessage::set_npid(::google::protobuf::uint64 value) {
  set_has_npid();
  npid_ = value;
}

// -------------------------------------------------------------------

// StorageSendRandomStringMessage

// required string randomString = 1;
inline bool StorageSendRandomStringMessage::has_randomstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageSendRandomStringMessage::set_has_randomstring() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageSendRandomStringMessage::clear_has_randomstring() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageSendRandomStringMessage::clear_randomstring() {
  if (randomstring_ != &::google::protobuf::internal::kEmptyString) {
    randomstring_->clear();
  }
  clear_has_randomstring();
}
inline const ::std::string& StorageSendRandomStringMessage::randomstring() const {
  return *randomstring_;
}
inline void StorageSendRandomStringMessage::set_randomstring(const ::std::string& value) {
  set_has_randomstring();
  if (randomstring_ == &::google::protobuf::internal::kEmptyString) {
    randomstring_ = new ::std::string;
  }
  randomstring_->assign(value);
}
inline void StorageSendRandomStringMessage::set_randomstring(const char* value) {
  set_has_randomstring();
  if (randomstring_ == &::google::protobuf::internal::kEmptyString) {
    randomstring_ = new ::std::string;
  }
  randomstring_->assign(value);
}
inline void StorageSendRandomStringMessage::set_randomstring(const char* value, size_t size) {
  set_has_randomstring();
  if (randomstring_ == &::google::protobuf::internal::kEmptyString) {
    randomstring_ = new ::std::string;
  }
  randomstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StorageSendRandomStringMessage::mutable_randomstring() {
  set_has_randomstring();
  if (randomstring_ == &::google::protobuf::internal::kEmptyString) {
    randomstring_ = new ::std::string;
  }
  return randomstring_;
}
inline ::std::string* StorageSendRandomStringMessage::release_randomstring() {
  clear_has_randomstring();
  if (randomstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = randomstring_;
    randomstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StorageSendRandomStringMessage::set_allocated_randomstring(::std::string* randomstring) {
  if (randomstring_ != &::google::protobuf::internal::kEmptyString) {
    delete randomstring_;
  }
  if (randomstring) {
    set_has_randomstring();
    randomstring_ = randomstring;
  } else {
    clear_has_randomstring();
    randomstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_storage_2eproto__INCLUDED
